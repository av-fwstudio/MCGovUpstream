{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{{ attach_library('bootstrap_barrio/node') }}

{%
    set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
]
%}
<article{{ attributes.addClass(classes) }}>
    <div class="container">
        <div{{ content_attributes.addClass('node__content', 'clearfix') }}>
           <div class="image-wrap">{{ content.field_image }}</div>
            <div class="events-wrapper">
                <div class="news-title">
                    {{ label }}
                </div>
                <div class="body">
                    {{ content.body.0['#text']|raw }}
                </div>
                {% set doc_url = file_url(content.field_document.0['#media'].field_media_document.entity.uri.value) %}
                {% set link_url = node.field_link.0.url ? node.field_link.0.url.toString : '' %}

                {% if doc_url or link_url %}
                    <div class="Related-document">
                        <span class="title">Related Document:</span>

                        {% if doc_url %}
                            <a href="{{ doc_url }}">
                                <i class="fa-solid fa-arrow-up-right-from-square"></i>
                                {{ content.field_document.0['#media'].field_media_document.entity.filename.value }}
                            </a>
                        {% endif %}

                        {% if link_url %}
                            <a href="{{ link_url }}">
                                <i class="fa-solid fa-link"></i>
                                {{ content.field_link.0['#title'] }}
                            </a>
                        {% endif %}
                    </div>
                {% endif %}
                <div class="date-wrap">
                    <div class="created">
                        <span class="created-date">Created Date :</span>
                        <span class="date">{{ node.created.value|date('M j, Y') }}</span>
                    </div>
                    {% if content.field_schedule_expiry_date.0['#text']|length > 0 %}
                        <div class="expiry">
                            <span class="expiry-date">Expiry Date :</span>
                            <span class="date">{{ node.field_schedule_expiry_date.value|date('M j, Y') }}</span>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</article>
